#include "Map.h"
#include <cstdlib>
#include <ctime>

Map::Map() {
    // Bản đồ tĩnh (dựa trên hình ảnh)
    TileType tempMap[MAP_ROWS][MAP_COLS] = {
        {STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL},
        {STEEL, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, GRASS, GRASS, EMPTY, EMPTY, STEEL},
        {STEEL, EMPTY, EMPTY, STEEL, GRASS, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, BRICK, BRICK, BRICK, EMPTY, STEEL},
        {STEEL, EMPTY, STEEL, STEEL, GRASS, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, GRASS, EMPTY, EMPTY, EMPTY, WATER, BRICK, EMPTY, STEEL},
        {STEEL, EMPTY, GRASS, GRASS, WATER, EMPTY, GRASS, BRICK, EMPTY, EMPTY, EMPTY, WATER, BRICK, EMPTY, EMPTY, EMPTY, EMPTY, BRICK, EMPTY, STEEL},
        {STEEL, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, WATER, BRICK, WATER, WATER, BRICK, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, STEEL},
        {STEEL, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, GRASS, BRICK, BRICK, GRASS, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, STEEL},
        {STEEL, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, GRASS, BRICK, BRICK, GRASS, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, STEEL},
        {STEEL, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, GRASS, BRICK, BRICK, GRASS, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, STEEL},
        {STEEL, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, BRICK, WATER, WATER, BRICK, WATER, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, STEEL},
        {STEEL, EMPTY, BRICK, EMPTY, EMPTY, EMPTY, EMPTY, BRICK, WATER, EMPTY, EMPTY, EMPTY, BRICK, GRASS, EMPTY, WATER, GRASS, GRASS, EMPTY, STEEL},
        {STEEL, EMPTY, BRICK, WATER, EMPTY, EMPTY, EMPTY, GRASS, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, GRASS, STEEL, STEEL, EMPTY, STEEL},
        {STEEL, EMPTY, BRICK, BRICK, BRICK, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, GRASS, STEEL, EMPTY, EMPTY, STEEL},
        {STEEL, EMPTY, EMPTY, GRASS, GRASS, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, STEEL},
        {STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL},
    };

    // Copy vào `grid`
    grid.resize(MAP_ROWS, std::vector<TileType>(MAP_COLS, EMPTY));
    for (int i = 0; i < MAP_ROWS; i++) {
        for (int j = 0; j < MAP_COLS; j++) {
            grid[i][j] = tempMap[i][j];
        }
    }

}

void Map::render(SDL_Renderer* renderer, SDL_Texture* steelTexture, SDL_Texture* brickTexture, SDL_Texture* grassTexture, SDL_Texture* waterTexture,SDL_Texture* emptyTexture) {
    for (int i = 0; i < MAP_ROWS; i++) {
        for (int j = 0; j < MAP_COLS; j++) {
            SDL_Rect tileRect = { j * TILE_SIZE, i * TILE_SIZE, TILE_SIZE, TILE_SIZE };
            switch (grid[i][j]) {
                case STEEL: SDL_RenderCopy(renderer, steelTexture, nullptr, &tileRect); break;
                case BRICK: SDL_RenderCopy(renderer, brickTexture, nullptr, &tileRect); break;
                case GRASS: SDL_RenderCopy(renderer, grassTexture, nullptr, &tileRect); break;
                case WATER: SDL_RenderCopy(renderer, waterTexture, nullptr, &tileRect); break;
                case EMPTY: SDL_RenderCopy(renderer, emptyTexture, nullptr, &tileRect); break;
                default: break;
            }
        }
    }

    // Vẽ xe tăng
}
void Map::reset() {
    grid.clear(); // Xóa bản đồ cũ
    TileType tempMap[MAP_ROWS][MAP_COLS] = {
        {STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL},
        {STEEL, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, GRASS, GRASS, EMPTY, EMPTY, STEEL},
        {STEEL, EMPTY, EMPTY, STEEL, GRASS, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, BRICK, BRICK, BRICK, EMPTY, STEEL},
        {STEEL, EMPTY, STEEL, STEEL, GRASS, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, GRASS, EMPTY, EMPTY, EMPTY, WATER, BRICK, EMPTY, STEEL},
        {STEEL, EMPTY, GRASS, GRASS, WATER, EMPTY, GRASS, BRICK, EMPTY, EMPTY, EMPTY, WATER, BRICK, EMPTY, EMPTY, EMPTY, EMPTY, BRICK, EMPTY, STEEL},
        {STEEL, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, WATER, BRICK, WATER, WATER, BRICK, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, STEEL},
        {STEEL, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, GRASS, BRICK, BRICK, GRASS, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, STEEL},
        {STEEL, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, GRASS, BRICK, BRICK, GRASS, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, STEEL},
        {STEEL, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, GRASS, BRICK, BRICK, GRASS, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, STEEL},
        {STEEL, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, BRICK, WATER, WATER, BRICK, WATER, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, STEEL},
        {STEEL, EMPTY, BRICK, EMPTY, EMPTY, EMPTY, EMPTY, BRICK, WATER, EMPTY, EMPTY, EMPTY, BRICK, GRASS, EMPTY, WATER, GRASS, GRASS, EMPTY, STEEL},
        {STEEL, EMPTY, BRICK, WATER, EMPTY, EMPTY, EMPTY, GRASS, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, GRASS, STEEL, STEEL, EMPTY, STEEL},
        {STEEL, EMPTY, BRICK, BRICK, BRICK, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, GRASS, STEEL, EMPTY, EMPTY, STEEL},
        {STEEL, EMPTY, EMPTY, GRASS, GRASS, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, STEEL},
        {STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL, STEEL},
    };


    // Copy vào `grid`
    grid.resize(MAP_ROWS, std::vector<TileType>(MAP_COLS, EMPTY));
    for (int i = 0; i < MAP_ROWS; i++) {
        for (int j = 0; j < MAP_COLS; j++) {
            grid[i][j] = tempMap[i][j];
        }
    }
}
